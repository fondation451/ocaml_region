let rgn0 = newrgn () in
let rgn1 = newrgn () in

aliasrgn rgn0 in
aliasrgn rgn1 in

let rec elem_of t out =
  { rgn1: _depth(t) * rcons -> 0 }
  match t with
  |Leaf -> out
  |Node x l r -> (elem_of l (Cons x out @ rgn1))
@
  rgn0
in

let t =
  Node 1
    (Node 9
      (Node 5 Leaf Leaf @ rgn0)
      Leaf
    @ rgn0)
    (Node 6
      (Node 4
        (Node 7 Leaf Leaf @ rgn0)
        Leaf
      @ rgn0)
      (Node 3 Leaf Leaf @ rgn0)
    @ rgn0)
  @ rgn0
in
let l = elem_of t Nil in
()
