let rgn0 = newrgn () in
let rgn1 = newrgn () in

aliasrgn rgn0 in
aliasrgn rgn1 in

let rec mk x is_node r =
  { r: rpair -> 0 }
  (is_node, x) @ r
@
  rgn0
in

let rec append l l' r =
  { r: _length(l) * rcons -> 0 }
  match l with
  | Nil -> l'
  | Cons h t -> Cons h (append t l' r) @ r
@
  rgn0
in

let rec prefix t r =
  { r: 3 * _node(t) * (rcons + rpair) + (rcons + rpair) -> 0 }
  match t with
  | Leaf -> begin
    let new_elem = mk 0 false r in
    Cons new_elem Nil @ r
  end
  | Node x lt rt -> begin
    let l_left = prefix lt r in
    let l_rigth = prefix rt r in
    let elems = append l_left l_rigth r in
    let new_elem = mk x true r in
    Cons new_elem elems @ r
  end
@
  rgn0
in
(*
let rec recompose l r =
  { r: _length(l) * (rnode + rpair) -> 0 }
  match l with
  | Nil -> (Leaf, Nil) @ r
  | Cons h t -> begin
    if fst h then begin
      let left_out = recompose t r in
      let left = fst left_out in
      let t' = snd left_out in
      let rigth_out = recompose t' r in
      let right = fst rigth_out in
      let t'' = snd rigth_out in
      (Node h left right @ r, t'') @ r
    end else
      (Leaf, t) @ r
  end
@
  rgn0
in
*)
(*
let rec cp_prefix t r =
  { r: _node(t) * () }
  let l = prefix t r in
  recompose l r
@
  rgn0
in
*)
let t =
  Node 1
    (Node 9
      (Node 5 Leaf Leaf @ rgn0)
      Leaf
    @ rgn0)
    (Node 6
      (Node 4
        (Node 7 Leaf Leaf @ rgn0)
        Leaf
      @ rgn0)
      (Node 3 Leaf Leaf @ rgn0)
    @ rgn0)
  @ rgn0
in

let l = prefix t rgn1 in

()
