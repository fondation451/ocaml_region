let rgn0 = newrgn () in
let rgn1 = newrgn () in
let rgn2 = newrgn () in
let rgn3 = newrgn () in
let rgn4 = newrgn () in

let rec duplicate xs r r1 r2 =
  { r : (_length(xs) + 1) * rpair -> 0 ;
    r1: _length(xs) * rcons -> 0 ;
    r2: _length(xs) * rcons -> 0 }
  match xs with
  |Nil -> (Nil, Nil) @ r
  |Cons h t -> begin
    let dup = duplicate t r r1 r2 in
    (Cons h (fst dup) @ r1, Cons h (snd dup) @ r2) @ r
  end
@
rgn0
in
begin
  aliasrgn rgn2 in begin
    let cou =
      aliasrgn rgn1 in
        let l = [4 ; 5 ; 6] @ rgn1 in
        duplicate l rgn2 rgn1 rgn2
    in begin
      freergn rgn1;
      aliasrgn rgn3 in
      aliasrgn rgn4 in
        duplicate (snd cou) rgn2 rgn3 rgn4;
        ()
    end
    
  end
end
